2018-03-01
================================
RFC Memory reduction methods: 
1) CBM reduction
2) Phase table compaction

1.  Possbile CBM reduction methods:
1.1 Last phase: each field value is concretized, rulelist => best-match rule becomes possbile,
    this will reduce the number of CBMs of the last phase a great deal, although it does not
    directly lead to table size reduction in the last phase, it produces a chance for table
    compaction with less CBM ids (and more long-run sequences of identical CBM ids in the table.

1.2 Intermediate phase: there are some chances, e.g., althoug with incomplete information on all
    field values, if the first few rules in a CBM are guaranteed to cover any following rules in
    the subspace at current phase, then the lower-prirority following rules can be safely removed
    from the CBM without affecting correctness, this CBM simplification will reduce CBM numbers,
    and directly leads to phase table size reduction at the next phase. The challenge is how to
    judge the redundancy of the lower-priority rules in a CBM list efficiently. A simple method
    would be: for the rest fields undecided at current phase, if an earlier rule r1 always covers
    a later rule r2 in each of the rest fields, then r2 is redundant and can be removed from the
    CBM rulelist. This is simple and safe, but it is unable to explore more sophiscated chances,
    .e.g, {r1, r2, r3} together formulate a subspace in the rest fields which covers the subspace
    of rule r4. In this case, r4 can also be safely removed, but it is very hard to represent
    the subspace of a set of rules {r1, r2, r3} because it is often irregular spaces.

2.  Possible phase table compaction methods:
2.1 run-length based: a long-run CBM id in the phase table can be compacted with run-length
    reprensentation. The chance can be evaluated to check whether a small portion of CBMs dominate
    in the phase table. The challenge is: current phase table access is based on a very simple index
    function: T_(n+1).cmbid = T1_n.idx * T2_n.size + T2_n.cbmid
    with run-length encoding, a similar simple index function is needed, and space overhead on
    the new phase table structure should be kept low. we can either apply run-length encoding, or
    borrow the idea of multi-level page table sin OS VM management, if long-run CBM id sequence
    are common
2.2 blocking based: for phase tables T1 and T2, divide each table into blocks with fixed-size or
    variable sizes. There are a few possible situations for crossproducting a block B1 in T1 and
    a block B2 in T2:
    a) B1 x B2: a single CBM entry in the next phase table
    b) B1 x B2: each entry in B1 creates the same resulting block B3 in the next phase, and B3 has
                the size of B2 (or less if considered duplicate entries in B3 are possible).
    c) B1 x B2: every entry in B1 creates the same resulting CBM entry in B3, but different B1
                entries create different CBM entries in B3. From another point of view, this is the
		situation in b), where B1 and B2 exchange roles, but the size of the resulting B3
		has the size of B1.
    d) B1 x B2: other situations, where B3 has the size of |B1| x |B2| in the worst case.


2018-03-02
=============
Changes for CBM1 * CBM2:
1. CBM1: cbm_id = (cbm-major, cbm-minor)
2. cbm-major fields: major_base, minor_base, minor_low, major_high


2018-03-12
============
Found radical reduction by excluding minor rules (global + local) from crossproducting in SIP x DIP:
* before excluding minor rules:
    type[0]: 21925
    type[1]: 3787
    type[2]: 38133
    type[3]: 6622
* after excluding minor rules:
    type[0]: 559
    type[1]: 8025
    type[2]: 3976
    type[3]: 57907

To exploit this observation for phase-table space saving, the following scheme is designed:
1. Each SIP/DIP CBM is split into major part and minor part, with minor rules moving to the minor
   part.
2. A blocking scheme is proposed, where a BLOCKSIZE of SIP CBMs are crossproducted with a BLOCKSIZE
   of DIP CBMs to ge a matrix of phase2 CBMs, and this matrix can be in one of 4 types:
    1) POINT: All elements in the matrix are identical, so can be represented with a single table
       entry.
    2) ROW: All rows in the matrix are identical, so can be represented as BLOCKSIZE table
       entries. This means different SIP CBMs produce the same resulting CBM on each DIP CBM in the
       block (which is a run-length of BLOCKSIZE in the original phase-2 block).
    3) COLUMN: All columns in the matrix are identical, so can be represented as BLOCKSIZE table
       entries. This means different DIP CBMs produce the same resulting CBM on each SIP CBM in the
       block (which is repetitive CBMs with a distance of phase_num_cbms[1][1] in the original
       phase table phase_tables[2][0])
    4) MATRIX: the resulting CBM block does not belong to the above types, and a matrix of
       BLOCKSIZE x BLOCKSIZE elements are needed to record the resulting CBMs.
3. A data structure: block_table_t, is designed for the blocking scheme, and a new indexing method
   containing access to the block-table is designed for phase-table addressing.
    

2018-03-17
==============
Now come back to master branch, and implement blocking mechanism without Major/Minor CBM decoupling.
Problem to solve:
1.  How many types of blocks?
    POINT: all CBMs are the same in the block
    ROW: all rows of CBMS are the same
    COL: all columns of CBMs are the same
    MATRIX: other situations

2.  For MATRIX blocks, if there exist a few dirt CBMs, how to represent them conveniently s.t. a
    space-saving type can still be applied to this block?
    1) For a MATRIX block to be represented as a space-saving block type, it can allow at most
       a ROW dirt, a COL dirt and a POINT dirt, therefore a 2-bit coding is used for dirt type
    1) There are two types of dirts: 
       a) LINE dirt; b) POINT dirt
    2) How many dirts are allowed in a block?
       Suppose the maximum BLOCKSIZE is 16, and a 32-bit vector for a row (R) or column (C)
       respectively. Then each row or column element has 2-bit for encoding its dirt type:
       00: not a dirt
       01: a POINT dirt
       10: the first LINE dirt (can be either ROW or COL)
       11: the second LINE dirt (can be either ROW or COL)
       Given a point [r, c] in a block, the meanings of the following combinations are:
       [00, 00]: a non-dirt point
       [00, 01]: a non-dirt point
       [00, 10]: a point on a dirt column, which is the first LINE dirt
       [00, 11]: a point on a dirt column, which is the second LINE dirt
       ---------------------------------------------------------------------------------------------
       [01, 00]: a non-dirt point
       [01, 01]: a dirt point, which is the first dirty point
       [01: 10]: a point on a dirt column, which is the first LINE dirt
                 NOTE: if this point is different to the corresponding points on other columns of
		 the same dirt LINE, this block should be treated as a MATRIX block
       [01: 11]: a point on a dirt column, which is the second LINE dirt
                 NOTE: if this point is different to the corresponding points on other columns of
		 the same dirt LINE, this block should be treated as a MATRIX block
       ---------------------------------------------------------------------------------------------
       [10: 00]: a point on a dirt row, which is the first LINE dirt
       [10, 01]: a point on a dirt row, which is the first LINE dirt
                 NOTE: if this point is different to the corresponding points on other rows of the
		 same dirt LINE, this block should be treated as a MATRIX block
       [10, 10]: an INVALID combination, as 10 indicates the first LINE dirt, which cannot be
                 both a row and a column at the same time
       [10, 11]: a dirt point crossed by a dirt row (the first LINE dirt) and a dirt column (the
	         second LINE dirt), and this dirt point is the second dirt point (irrespective of
	         whether the first dirty point [01, 01] exists or not, it is always stored as the
		 second dirt point for convenience of simple addressing and fast access)
       ---------------------------------------------------------------------------------------------
       [11, 00]: a point on a dirt row, which is the second LINE dirt
       [11, 01]: a point on a dirt row, which is the second LINE dirt
                 NOTE: if this point is different to the corrsponding points on other rows of the
		 same dirt LINE, this block should be treated as a MATRIX block
       [11, 10]: a dirt point crossed by a dirt row (the second LINE dirt) and a dirt column (the
	         first LINE dirt), and this dirt point is the third dirt point (irrespective of
	         whether the first dirt point [01, 01] exists or not, it is always stored as the
		 third dirt point for convenience of simple addressing and fast access)
       [11, 11]: an INVALID combination, as 11 indicates the second LINE dirt, which cannot be 
                 both a row and a column at the same time
       =============================================================================================
       In summary: at most 2 LINE dirts (2-row, 2-column, or 1-row + 1-column) and 3 POINT dirts
       ([01, 01], [10, 11], [11, 10]) are allowed. 
       Note: rows or columns with the same values can share the same dirt LINE code; Similarly,
       points having the same value can share the same dirt POINT code as well

3. Example blocks (from acl2-8k, phase 3):

(r5, c4): 
 29 30  31  25 32  25  25  33 
 29 30  31  25 32  25  25  33 
 29 30  31  25 32  25  25  33 
 29 30  31  96 32  96  96  33 
 29 30  31  25 32  25  25  33 
 29 30  31  25 32  25  25  33 
 29 30  31 100 32 100 100  33 
102 30 102 102 32 102 102 102 
a MATRIX block with a compact representation =>
a ROW block (29 30 31 25 32 25 25 33) with
LINE dirt r6 = 10 (29 30 31 100 32 100 100 33),
LINE dirt r7 = 11 (102 30 102 102 32 102 102 102),
POINT dirt r3 = 01, c3/c5/c6 = 01

(r10, c519): 
2488 2489 2490 2491 2492 2493 2494 2495 
524 525 526 527 528 529 530 531 
524 525 526 527 528 529 530 531 
524 525 526 527 528 529 530 531 
524 525 526 527 528 529 530 531 
524 525 526 527 528 529 530 531 
524 525 526 527 528 529 530 531 
524 525 526 527 528 529 530 531 
A MATRIX block with a compact representation =>
a ROW block (524 525 526 527 528 529 530 531) with 
LINE dirt r0 = 10 (2488 2489 2490 2491 2492 2493 2494 2495)

(r11, c23):
2804 2804 2804 2804 2804 2805 2804 2804 
0 0 0 0 0 0 0 0 
3183 3183 3183 3183 3183 3183 3183 3183 
3788 3788 3788 3788 3788 3788 3788 3788 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
A MATRIX block with multiple compact representations =>
1)
a POINT block (0) with 
LINE dirt r0 = 10 (2804 2804 2804 2804 2804 2805 2804 2804)
LINE dirt r2 = 11 (3788 3788 3788 3788 3788 3788 3788 3788)
POINT dirt [r3 = 01, c* = 01]
2)
a COL block (2804 0 3183 3788 0 0 0 0) with
POINT dirt 2805 at [r0 = 01, c5 = 01]
    
(r0, c0): 
 0  1  2  3  4  5  6  7 
 0  1  2  3  4  5 44  7 
46 46 46 46 46 46 46 46 
47 47 47 47 47 47 47 47 
 0  1  2  3  4  5 48  7 
 0  1 49 49 49 49 49 49 
 0  1 50  3  4  5 44  7 
 0  1 51  3  4  5 44  7 
a MATRIX block unfit for compact representation

4. How to decide the type of a block, and how to identify its dirts?
Step 0: When a new CBM is created, scan its rules to decide its local type (none, point, row, col).



2018-04-05
================================
Blocking Shuffling steps:
1.  scan a sub-table, and find the most populous CBM (pop_cbm) in it
2.  scan the sub-table again, get the counts of pop_cbm in each row and column, 
    and sort the rows/cols according to their counts.
3.  decide the number of rows and cols for selection with criteria that non pop_cbms are below a threshold in the area
